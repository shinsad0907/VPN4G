import base64

# Base64 encoded string provided by the user
encoded_str = ""

# Thêm padding nếu cần
missing_padding = len(encoded_str) % 4
if missing_padding != 0:
    encoded_str += '=' * (4 - missing_padding)

# Giải mã chuỗi Base64
decoded_bytes = base64.b64decode(encoded_str)
print(decoded_bytes)